{"version":3,"sources":["utils/random-generator-client.ts","components/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomIndex","n","Math","floor","random","length","RandomWordGeneratorClient","selectionMap","this","randomQuestion","randomPhrase","randomSentence","randomAdjective","randomBreakfastIdea","pictures","image_url","phrases","phrase","sentences","sentence","adjectives","adjective","value","breakfastIdeas","title","questions","question","randomGeneratorClient","DEFAULT_CONFIG","secondsPerSlide","Game","props","myInterval","toggle","bind","setState","config","imgURL","randomImageSrc","imgAlt","randomSlideTitle","seconds","slideNum","running","run","clearInterval","setInterval","state","remainingSecondsColor","className","src","alt","style","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.276fcae5.chunk.js","sourcesContent":["import {data as pictures} from '../data/pictures.json'\nimport {data as sentences} from '../data/sentences.json'\nimport {data as phrases} from '../data/phrases.json'\nimport {data as adjectives} from '../data/adjectives.json'\nimport {data as breakfastIdeas} from '../data/breakfast-idea.json'\nimport {data as questions} from '../data/questions.json'\n\nfunction randomIndex(n: any[]): number {\n    return Math.floor(Math.random() * n.length)\n}\n\nexport class RandomWordGeneratorClient {\n    selectionMap = [this.randomQuestion, this.randomPhrase, this.randomSentence, this.randomAdjective,\n        this.randomQuestion, this.randomPhrase, this.randomSentence, this.randomAdjective, this.randomBreakfastIdea]\n\n    randomImageSrc(): string {\n        return 'https://randomwordgenerator.com/img/picture-generator/' + pictures[Math.floor(Math.random() * pictures.length)].image_url\n    }\n\n    randomPhrase(): string {\n        return phrases[randomIndex(phrases)].phrase\n    }\n\n    randomSentence(): string {\n        return sentences[randomIndex(sentences)].sentence\n    }\n\n    randomAdjective(): string {\n        return adjectives[randomIndex(adjectives)].adjective.value\n    }\n\n    randomBreakfastIdea(): string {\n        return breakfastIdeas[randomIndex(breakfastIdeas)].title\n    }\n\n    randomQuestion(): string {\n        return questions[randomIndex(questions)].question\n    }\n\n    randomSlideTitle(): string {\n        return this.selectionMap[randomIndex(this.selectionMap)]()\n    }\n\n}\n","import {RandomWordGeneratorClient} from \"../utils/random-generator-client\";\nimport React, {Component} from \"react\";\n\nconst randomGeneratorClient = new RandomWordGeneratorClient()\n\ninterface Config {\n    secondsPerSlide: number\n}\n\nconst DEFAULT_CONFIG = {\n    secondsPerSlide: 15,\n}\n\ntype GameState = {\n    config: Config\n    imgURL: string\n    imgAlt: string\n    title: string\n    seconds: number\n    slideNum: number\n    running: boolean\n}\n\nexport class Game extends Component<any, GameState> {\n\n    myInterval: NodeJS.Timeout | undefined\n\n    constructor(props: any) {\n        super(props);\n        this.toggle = this.toggle.bind(this)\n    }\n\n    componentWillMount() {\n        this.setState({\n            config: DEFAULT_CONFIG,\n            imgURL: randomGeneratorClient.randomImageSrc(),\n            imgAlt: randomGeneratorClient.randomPhrase(),\n            title: randomGeneratorClient.randomSlideTitle(),\n            seconds: DEFAULT_CONFIG.secondsPerSlide,\n            slideNum: 0,\n            running: true,\n        })\n    }\n\n    componentDidMount() {\n        this.run()\n    }\n\n    componentWillUnmount() {\n        this.myInterval && clearInterval(this.myInterval)\n    }\n\n    run() {\n        this.myInterval = setInterval(() => {\n            const {seconds, slideNum, config} = this.state\n\n            if (seconds > 0) {\n                this.setState(({seconds}) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 1) {\n                this.setState({\n                    imgURL: randomGeneratorClient.randomImageSrc(),\n                    imgAlt: randomGeneratorClient.randomPhrase(),\n                    title: randomGeneratorClient.randomSlideTitle(),\n                    seconds: config.secondsPerSlide,\n                    slideNum: slideNum + 1\n                })\n            }\n        }, 1000)\n    }\n\n    toggle() {\n        if (this.state.running) {\n            this.myInterval && clearInterval(this.myInterval)\n            this.setState({\n                running: false,\n            })\n        } else {\n            this.run()\n            this.setState({\n                running: true\n            })\n        }\n    }\n\n    render() {\n        const remainingSecondsColor = this.state.seconds > 3 ? 'white' : 'red';\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={this.state.imgURL} alt={this.state.imgAlt} style={{'width': '100%'}} onClick={this.toggle}/>\n                    {this.state.slideNum % 4 < 3 && <div className=\"slide-title\">{this.state.title}</div>}\n                    <div className=\"remaining-seconds\" style={\n                        {'WebkitTextFillColor': remainingSecondsColor}\n                    }>{this.state.seconds}</div>\n                </header>\n            </div>)\n    }\n}\n","import React from 'react'\nimport './App.css';\nimport {Game} from './components/main'\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}