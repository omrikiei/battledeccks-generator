{"version":3,"sources":["utils/random-generator-client.ts","components/main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["randomIndex","n","Math","floor","random","length","RandomWordGeneratorClient","selectionMap","this","randomQuestion","randomPhrase","randomSentence","randomAdjective","randomBreakfastIdea","pictures","image_url","phrases","phrase","sentences","sentence","adjectives","adjective","value","breakfastIdeas","title","questions","question","ReactGA","initialize","pageview","window","location","pathname","search","randomGeneratorClient","DEFAULT_CONFIG","secondsPerSlide","slidesPerDeck","Game","props","myInterval","toggle","bind","run","escFunction","event","keyCode","setState","slideNum","started","running","config","imgURL","randomImageSrc","imgAlt","randomSlideTitle","seconds","document","addEventListener","clearInterval","removeEventListener","setInterval","state","remainingSecondsColor","init","style","Card","Form","Group","controlId","Label","Control","type","min","max","onChange","e","parseInt","target","Button","onClick","runningGame","src","alt","className","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dada9d76.chunk.js","sourcesContent":["import {data as pictures} from '../data/pictures.json'\nimport {data as sentences} from '../data/sentences.json'\nimport {data as phrases} from '../data/phrases.json'\nimport {data as adjectives} from '../data/adjectives.json'\nimport {data as breakfastIdeas} from '../data/breakfast-idea.json'\nimport {data as questions} from '../data/questions.json'\n\nfunction randomIndex(n: any[]): number {\n    return Math.floor(Math.random() * n.length)\n}\n\nexport class RandomWordGeneratorClient {\n    selectionMap = [this.randomQuestion, this.randomPhrase, this.randomSentence, this.randomAdjective,\n        this.randomQuestion, this.randomPhrase, this.randomSentence, this.randomAdjective, this.randomBreakfastIdea]\n\n    randomImageSrc(): string {\n        return 'https://randomwordgenerator.com/img/picture-generator/' + pictures[Math.floor(Math.random() * pictures.length)].image_url\n    }\n\n    randomPhrase(): string {\n        return phrases[randomIndex(phrases)].phrase\n    }\n\n    randomSentence(): string {\n        return sentences[randomIndex(sentences)].sentence\n    }\n\n    randomAdjective(): string {\n        return adjectives[randomIndex(adjectives)].adjective.value\n    }\n\n    randomBreakfastIdea(): string {\n        return breakfastIdeas[randomIndex(breakfastIdeas)].title\n    }\n\n    randomQuestion(): string {\n        return questions[randomIndex(questions)].question\n    }\n\n    randomSlideTitle(): string {\n        return this.selectionMap[randomIndex(this.selectionMap)]()\n    }\n\n}\n","import {RandomWordGeneratorClient} from \"../utils/random-generator-client\";\nimport React, {Component} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/FormGroup'\nimport ReactGA from 'react-ga';\nReactGA.initialize('G-DFWFH1G333');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nconst randomGeneratorClient = new RandomWordGeneratorClient()\n\ninterface Config {\n    secondsPerSlide: number\n}\n\nconst DEFAULT_CONFIG = {\n    secondsPerSlide: 15,\n    slidesPerDeck: 10\n}\n\ntype GameState = {\n    config: Config\n    imgURL: string\n    imgAlt: string\n    title: string\n    seconds: number\n    slideNum: number\n    slidesPerDeck: number\n    running: boolean\n    started: boolean\n}\n\nexport class Game extends Component<any, GameState> {\n\n    myInterval: NodeJS.Timeout | undefined\n\n    constructor(props: any) {\n        super(props);\n        this.toggle = this.toggle.bind(this)\n        this.run = this.run.bind(this)\n        this.escFunction = this.escFunction.bind(this);\n    }\n\n    escFunction(event: KeyboardEvent) {\n        if (event.keyCode === 27) {\n            this.setState({\n                slideNum: 0,\n                started: false,\n                running: false\n            })\n        }\n    }\n\n    componentWillMount() {\n        this.setState({\n            config: DEFAULT_CONFIG,\n            imgURL: randomGeneratorClient.randomImageSrc(),\n            imgAlt: randomGeneratorClient.randomPhrase(),\n            title: randomGeneratorClient.randomSlideTitle(),\n            seconds: DEFAULT_CONFIG.secondsPerSlide,\n            slidesPerDeck: DEFAULT_CONFIG.slidesPerDeck,\n            slideNum: 1,\n            running: true,\n            started: false,\n        })\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.escFunction, false);\n    }\n\n    componentWillUnmount() {\n        this.myInterval && clearInterval(this.myInterval)\n        document.removeEventListener(\"keydown\", this.escFunction, false);\n    }\n\n    run() {\n        this.setState({\n            started: true\n        })\n        this.myInterval = setInterval(() => {\n            const {seconds, slideNum, config} = this.state\n\n            if (seconds > 0) {\n                this.setState(({seconds}) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 1) {\n                if (slideNum < this.state.slidesPerDeck) {\n                    this.setState({\n                        imgURL: randomGeneratorClient.randomImageSrc(),\n                        imgAlt: randomGeneratorClient.randomPhrase(),\n                        title: randomGeneratorClient.randomSlideTitle(),\n                        seconds: config.secondsPerSlide,\n                        slideNum: slideNum + 1\n                    })\n                } else {\n                    this.setState({\n                        slideNum: 1,\n                        started: false,\n                        running: false\n                    })\n                    this.myInterval && clearInterval(this.myInterval)\n                }\n\n            }\n        }, 1000)\n    }\n\n    toggle() {\n        if (this.state.running) {\n            this.myInterval && clearInterval(this.myInterval)\n            this.setState({\n                running: false,\n            })\n        } else {\n            this.run()\n            this.setState({\n                running: true\n            })\n        }\n    }\n\n    render() {\n        const remainingSecondsColor = this.state.seconds > 3 ? 'white' : 'red';\n\n        const init = <div style={{'width': '50%'}}>\n            <h1>Welcome to battledecks</h1>\n            <p>Battledecks — also called Powerpoint Karaoke — is an improv game that works well at conferences.\n                Contestants make up presentations using slide decks they have never seen before. That means your goal is\n                to make the audience laugh using two props: slide decks and willing participants. </p>\n            <Card>\n\n            </Card>\n            <Form>\n                <Row>\n                    <Col>\n                        <Form.Group controlId=\"formBasicRange\">\n                            <Form.Label>Seconds per slide</Form.Label>\n                            <Form.Control type=\"range\" value={this.state.seconds} min='5' max='60' onChange={e =>\n                                this.setState({\n                                    seconds: parseInt(e.target.value),\n                                })}/>\n                            <Form.Control value={this.state.seconds}/>\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlId=\"formBasicRange\">\n                            <Form.Label>Number of slides</Form.Label>\n                            <Form.Control type=\"range\" value={this.state.slidesPerDeck} min='2' max='20' onChange={e =>\n                                this.setState({\n                                    slidesPerDeck: parseInt(e.target.value),\n                                })}/>\n                            <Form.Control value={this.state.slidesPerDeck}/>\n                        </Form.Group>\n                    </Col>\n                </Row>\n            </Form>\n            <Button onClick={e => {\n                this.run()\n            }\n            }>Start</Button>\n        </div>\n\n        const runningGame = <div style={{'width': '100%'}}>\n            <img src={this.state.imgURL} alt={this.state.imgAlt} style={{'width': '100%'}} onClick={this.toggle}/>\n            {this.state.slideNum % 4 < 3 && <div className=\"slide-title\">{this.state.title}</div>}\n            <div className=\"remaining-seconds\" style={\n                {'WebkitTextFillColor': remainingSecondsColor}\n            }>{this.state.seconds}</div>\n            <div className=\"slide-num\">{this.state.slideNum}</div>\n        </div>\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {!this.state.started ? init : runningGame}\n                </header>\n            </div>)\n    }\n}\n\n","import React from 'react'\nimport './App.css';\nimport {Game} from './components/main'\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}